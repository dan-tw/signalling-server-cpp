// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2eproto;
namespace proto {
class AuthenticationRequest;
class AuthenticationRequestDefaultTypeInternal;
extern AuthenticationRequestDefaultTypeInternal _AuthenticationRequest_default_instance_;
class AuthenticationResponse;
class AuthenticationResponseDefaultTypeInternal;
extern AuthenticationResponseDefaultTypeInternal _AuthenticationResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::AuthenticationRequest* Arena::CreateMaybeMessage<::proto::AuthenticationRequest>(Arena*);
template<> ::proto::AuthenticationResponse* Arena::CreateMaybeMessage<::proto::AuthenticationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum AuthenticationResponse_Outcome : int {
  AuthenticationResponse_Outcome_REDIRECT = 0,
  AuthenticationResponse_Outcome_INVALID_TOKEN = 1,
  AuthenticationResponse_Outcome_AUTHENTICATED = 2,
  AuthenticationResponse_Outcome_ERROR = 3,
  AuthenticationResponse_Outcome_AuthenticationResponse_Outcome_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AuthenticationResponse_Outcome_AuthenticationResponse_Outcome_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AuthenticationResponse_Outcome_IsValid(int value);
constexpr AuthenticationResponse_Outcome AuthenticationResponse_Outcome_Outcome_MIN = AuthenticationResponse_Outcome_REDIRECT;
constexpr AuthenticationResponse_Outcome AuthenticationResponse_Outcome_Outcome_MAX = AuthenticationResponse_Outcome_ERROR;
constexpr int AuthenticationResponse_Outcome_Outcome_ARRAYSIZE = AuthenticationResponse_Outcome_Outcome_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticationResponse_Outcome_descriptor();
template<typename T>
inline const std::string& AuthenticationResponse_Outcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticationResponse_Outcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticationResponse_Outcome_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticationResponse_Outcome_descriptor(), enum_t_value);
}
inline bool AuthenticationResponse_Outcome_Parse(
    const std::string& name, AuthenticationResponse_Outcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticationResponse_Outcome>(
    AuthenticationResponse_Outcome_descriptor(), name, value);
}
// ===================================================================

class AuthenticationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AuthenticationRequest) */ {
 public:
  AuthenticationRequest();
  virtual ~AuthenticationRequest();

  AuthenticationRequest(const AuthenticationRequest& from);
  AuthenticationRequest(AuthenticationRequest&& from) noexcept
    : AuthenticationRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticationRequest& operator=(const AuthenticationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationRequest& operator=(AuthenticationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticationRequest*>(
               &_AuthenticationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticationRequest& a, AuthenticationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationRequest* New() const final {
    return CreateMaybeMessage<AuthenticationRequest>(nullptr);
  }

  AuthenticationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticationRequest& from);
  void MergeFrom(const AuthenticationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AuthenticationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kProviderFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string provider = 2;
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // @@protoc_insertion_point(class_scope:proto.AuthenticationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AuthenticationResponse) */ {
 public:
  AuthenticationResponse();
  virtual ~AuthenticationResponse();

  AuthenticationResponse(const AuthenticationResponse& from);
  AuthenticationResponse(AuthenticationResponse&& from) noexcept
    : AuthenticationResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticationResponse& operator=(const AuthenticationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationResponse& operator=(AuthenticationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticationResponse& default_instance();

  enum PayloadCase {
    kUrl = 2,
    kId = 3,
    kError = 4,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticationResponse*>(
               &_AuthenticationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthenticationResponse& a, AuthenticationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationResponse* New() const final {
    return CreateMaybeMessage<AuthenticationResponse>(nullptr);
  }

  AuthenticationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticationResponse& from);
  void MergeFrom(const AuthenticationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AuthenticationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthenticationResponse_Outcome Outcome;
  static constexpr Outcome REDIRECT =
    AuthenticationResponse_Outcome_REDIRECT;
  static constexpr Outcome INVALID_TOKEN =
    AuthenticationResponse_Outcome_INVALID_TOKEN;
  static constexpr Outcome AUTHENTICATED =
    AuthenticationResponse_Outcome_AUTHENTICATED;
  static constexpr Outcome ERROR =
    AuthenticationResponse_Outcome_ERROR;
  static inline bool Outcome_IsValid(int value) {
    return AuthenticationResponse_Outcome_IsValid(value);
  }
  static constexpr Outcome Outcome_MIN =
    AuthenticationResponse_Outcome_Outcome_MIN;
  static constexpr Outcome Outcome_MAX =
    AuthenticationResponse_Outcome_Outcome_MAX;
  static constexpr int Outcome_ARRAYSIZE =
    AuthenticationResponse_Outcome_Outcome_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Outcome_descriptor() {
    return AuthenticationResponse_Outcome_descriptor();
  }
  template<typename T>
  static inline const std::string& Outcome_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Outcome>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Outcome_Name.");
    return AuthenticationResponse_Outcome_Name(enum_t_value);
  }
  static inline bool Outcome_Parse(const std::string& name,
      Outcome* value) {
    return AuthenticationResponse_Outcome_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutcomeFieldNumber = 1,
    kUrlFieldNumber = 2,
    kIdFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // .proto.AuthenticationResponse.Outcome outcome = 1;
  void clear_outcome();
  ::proto::AuthenticationResponse_Outcome outcome() const;
  void set_outcome(::proto::AuthenticationResponse_Outcome value);
  private:
  ::proto::AuthenticationResponse_Outcome _internal_outcome() const;
  void _internal_set_outcome(::proto::AuthenticationResponse_Outcome value);
  public:

  // string url = 2;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string id = 3;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string error = 4;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:proto.AuthenticationResponse)
 private:
  class _Internal;
  void set_has_url();
  void set_has_id();
  void set_has_error();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int outcome_;
  union PayloadUnion {
    PayloadUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticationRequest

// string token = 1;
inline void AuthenticationRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthenticationRequest::token() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationRequest.token)
  return _internal_token();
}
inline void AuthenticationRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:proto.AuthenticationRequest.token)
}
inline std::string* AuthenticationRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationRequest.token)
  return _internal_mutable_token();
}
inline const std::string& AuthenticationRequest::_internal_token() const {
  return token_.GetNoArena();
}
inline void AuthenticationRequest::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticationRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AuthenticationRequest.token)
}
inline void AuthenticationRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AuthenticationRequest.token)
}
inline void AuthenticationRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AuthenticationRequest.token)
}
inline std::string* AuthenticationRequest::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticationRequest::release_token() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticationRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationRequest.token)
}

// string provider = 2;
inline void AuthenticationRequest::clear_provider() {
  provider_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthenticationRequest::provider() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationRequest.provider)
  return _internal_provider();
}
inline void AuthenticationRequest::set_provider(const std::string& value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:proto.AuthenticationRequest.provider)
}
inline std::string* AuthenticationRequest::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationRequest.provider)
  return _internal_mutable_provider();
}
inline const std::string& AuthenticationRequest::_internal_provider() const {
  return provider_.GetNoArena();
}
inline void AuthenticationRequest::_internal_set_provider(const std::string& value) {
  
  provider_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticationRequest::set_provider(std::string&& value) {
  
  provider_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AuthenticationRequest.provider)
}
inline void AuthenticationRequest::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AuthenticationRequest.provider)
}
inline void AuthenticationRequest::set_provider(const char* value, size_t size) {
  
  provider_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AuthenticationRequest.provider)
}
inline std::string* AuthenticationRequest::_internal_mutable_provider() {
  
  return provider_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticationRequest::release_provider() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationRequest.provider)
  
  return provider_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticationRequest::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider);
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationRequest.provider)
}

// -------------------------------------------------------------------

// AuthenticationResponse

// .proto.AuthenticationResponse.Outcome outcome = 1;
inline void AuthenticationResponse::clear_outcome() {
  outcome_ = 0;
}
inline ::proto::AuthenticationResponse_Outcome AuthenticationResponse::_internal_outcome() const {
  return static_cast< ::proto::AuthenticationResponse_Outcome >(outcome_);
}
inline ::proto::AuthenticationResponse_Outcome AuthenticationResponse::outcome() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationResponse.outcome)
  return _internal_outcome();
}
inline void AuthenticationResponse::_internal_set_outcome(::proto::AuthenticationResponse_Outcome value) {
  
  outcome_ = value;
}
inline void AuthenticationResponse::set_outcome(::proto::AuthenticationResponse_Outcome value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.outcome)
}

// string url = 2;
inline bool AuthenticationResponse::_internal_has_url() const {
  return payload_case() == kUrl;
}
inline void AuthenticationResponse::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void AuthenticationResponse::clear_url() {
  if (_internal_has_url()) {
    payload_.url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& AuthenticationResponse::url() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationResponse.url)
  return _internal_url();
}
inline void AuthenticationResponse::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.url)
}
inline std::string* AuthenticationResponse::mutable_url() {
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationResponse.url)
  return _internal_mutable_url();
}
inline const std::string& AuthenticationResponse::_internal_url() const {
  if (_internal_has_url()) {
    return payload_.url_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticationResponse::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_payload();
    set_has_url();
    payload_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticationResponse::set_url(std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.url)
  if (!_internal_has_url()) {
    clear_payload();
    set_has_url();
    payload_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AuthenticationResponse.url)
}
inline void AuthenticationResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_url()) {
    clear_payload();
    set_has_url();
    payload_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AuthenticationResponse.url)
}
inline void AuthenticationResponse::set_url(const char* value, size_t size) {
  if (!_internal_has_url()) {
    clear_payload();
    set_has_url();
    payload_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AuthenticationResponse.url)
}
inline std::string* AuthenticationResponse::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_payload();
    set_has_url();
    payload_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticationResponse::release_url() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationResponse.url)
  if (_internal_has_url()) {
    clear_has_payload();
    return payload_.url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AuthenticationResponse::set_allocated_url(std::string* url) {
  if (has_payload()) {
    clear_payload();
  }
  if (url != nullptr) {
    set_has_url();
    payload_.url_.UnsafeSetDefault(url);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationResponse.url)
}

// string id = 3;
inline bool AuthenticationResponse::_internal_has_id() const {
  return payload_case() == kId;
}
inline void AuthenticationResponse::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void AuthenticationResponse::clear_id() {
  if (_internal_has_id()) {
    payload_.id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& AuthenticationResponse::id() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationResponse.id)
  return _internal_id();
}
inline void AuthenticationResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.id)
}
inline std::string* AuthenticationResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationResponse.id)
  return _internal_mutable_id();
}
inline const std::string& AuthenticationResponse::_internal_id() const {
  if (_internal_has_id()) {
    return payload_.id_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticationResponse::_internal_set_id(const std::string& value) {
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticationResponse::set_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.id)
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AuthenticationResponse.id)
}
inline void AuthenticationResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AuthenticationResponse.id)
}
inline void AuthenticationResponse::set_id(const char* value, size_t size) {
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AuthenticationResponse.id)
}
inline std::string* AuthenticationResponse::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticationResponse::release_id() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationResponse.id)
  if (_internal_has_id()) {
    clear_has_payload();
    return payload_.id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AuthenticationResponse::set_allocated_id(std::string* id) {
  if (has_payload()) {
    clear_payload();
  }
  if (id != nullptr) {
    set_has_id();
    payload_.id_.UnsafeSetDefault(id);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationResponse.id)
}

// string error = 4;
inline bool AuthenticationResponse::_internal_has_error() const {
  return payload_case() == kError;
}
inline void AuthenticationResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void AuthenticationResponse::clear_error() {
  if (_internal_has_error()) {
    payload_.error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& AuthenticationResponse::error() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationResponse.error)
  return _internal_error();
}
inline void AuthenticationResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.error)
}
inline std::string* AuthenticationResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationResponse.error)
  return _internal_mutable_error();
}
inline const std::string& AuthenticationResponse::_internal_error() const {
  if (_internal_has_error()) {
    return payload_.error_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticationResponse::_internal_set_error(const std::string& value) {
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticationResponse::set_error(std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.error)
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AuthenticationResponse.error)
}
inline void AuthenticationResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AuthenticationResponse.error)
}
inline void AuthenticationResponse::set_error(const char* value, size_t size) {
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AuthenticationResponse.error)
}
inline std::string* AuthenticationResponse::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticationResponse::release_error() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationResponse.error)
  if (_internal_has_error()) {
    clear_has_payload();
    return payload_.error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AuthenticationResponse::set_allocated_error(std::string* error) {
  if (has_payload()) {
    clear_payload();
  }
  if (error != nullptr) {
    set_has_error();
    payload_.error_.UnsafeSetDefault(error);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationResponse.error)
}

inline bool AuthenticationResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void AuthenticationResponse::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline AuthenticationResponse::PayloadCase AuthenticationResponse::payload_case() const {
  return AuthenticationResponse::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::AuthenticationResponse_Outcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::AuthenticationResponse_Outcome>() {
  return ::proto::AuthenticationResponse_Outcome_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
